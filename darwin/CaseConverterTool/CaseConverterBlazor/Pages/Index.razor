@page "/"
@using Microsoft.AspNetCore.Components.Web
@using CaseConverterBlazor.Data
@inject CaseConverterService ConverterService

<PageTitle>Case Converter Tool</PageTitle>

<div class="container mt-5">
    <div class="card shadow">
        <div class="card-header bg-primary text-white">
            <h1 class="display-6 mb-0">Case Converter Tool</h1>
        </div>
        <div class="card-body">
            <!-- Directory Inputs -->
            <div class="mb-4">
                <div class="form-group mb-3">
                    <label class="form-label">
                        SQL Server Directory (Reference Format)
                    </label>
                    <div class="input-group">
                        <input type="text" 
                               @bind="SqlServerPath" 
                               class="form-control"
                               placeholder="Enter SQL Server directory path..." />
                        <span class="input-group-text">
                            <i class="bi bi-folder"></i>
                        </span>
                    </div>
                </div>

                <div class="form-group mb-3">
                    <label class="form-label">
                        MariaDB Directory (Files to Update)
                    </label>
                    <div class="input-group">
                        <input type="text" 
                               @bind="MariaDbPath" 
                               class="form-control"
                               placeholder="Enter MariaDB directory path..." />
                        <span class="input-group-text">
                            <i class="bi bi-folder"></i>
                        </span>
                    </div>
                </div>
            </div>

            <!-- Action Buttons -->
            <div class="d-flex gap-2 mb-4">
                <button class="btn btn-primary"
                        @onclick="PreviewChanges"
                        disabled="@(IsProcessing || string.IsNullOrEmpty(SqlServerPath) || string.IsNullOrEmpty(MariaDbPath))">
                    <i class="bi bi-eye me-2"></i>
                    Preview Changes
                </button>

                <button class="btn btn-success"
                        @onclick="ApplyChanges"
                        disabled="@(IsProcessing || string.IsNullOrEmpty(SqlServerPath) || string.IsNullOrEmpty(MariaDbPath))">
                    <i class="bi bi-check2-circle me-2"></i>
                    Apply Changes
                </button>
            </div>

            <!-- Processing Indicator -->
            @if (IsProcessing)
            {
                <div class="alert alert-info d-flex align-items-center">
                    <div class="spinner-border spinner-border-sm me-2" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    Processing...
                </div>
            }

            <!-- Results Display -->
            @if (Results.Any())
            {
                <div class="card mt-4">
                    <div class="card-header bg-light">
                        <h5 class="mb-0">Results</h5>
                    </div>
                    <div class="card-body">
                        @foreach (var result in Results)
                        {
                            <div class="@(result.StartsWith("Error") ? "text-danger" : "text-dark") mb-2">
                                @if (result.StartsWith("Error"))
                                {
                                    <i class="bi bi-exclamation-triangle me-2"></i>
                                }
                                else
                                {
                                    <i class="bi bi-info-circle me-2"></i>
                                }
                                @result
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private string SqlServerPath { get; set; } = string.Empty;
    private string MariaDbPath { get; set; } = string.Empty;
    private List<string> Results { get; set; } = new();
    private bool IsProcessing { get; set; }

    private async Task PreviewChanges()
    {
        try
        {
            IsProcessing = true;
            Results.Clear();
            Results = await ConverterService.AnalyzeChanges(SqlServerPath, MariaDbPath);
        }
        catch (Exception ex)
        {
            Results.Add($"Error: {ex.Message}");
        }
        finally
        {
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task ApplyChanges()
    {
        try
        {
            IsProcessing = true;
            Results.Clear();
            Results = await ConverterService.ApplyChanges(SqlServerPath, MariaDbPath);
        }
        catch (Exception ex)
        {
            Results.Add($"Error: {ex.Message}");
        }
        finally
        {
            IsProcessing = false;
            StateHasChanged();
        }
    }
}