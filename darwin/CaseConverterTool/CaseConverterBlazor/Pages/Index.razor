@page "/"
@using Microsoft.AspNetCore.Components.Web
@using CaseConverterBlazor.Data
@inject CaseConverterService ConverterService

<PageTitle>Case Converter Tool</PageTitle>

<ErrorBoundary>
    <ChildContent>
        <div class="container mx-auto px-4 py-8">
            <h1 class="text-3xl font-bold mb-6">Case Converter Tool</h1>

            <div class="space-y-6">
                <!-- Directory Inputs -->
                <div class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium mb-2">
                            SQL Server Directory (Reference Format)
                        </label>
                        <input 
                            type="text" 
                            @bind="SqlServerPath" 
                            class="w-full p-2 border rounded"
                            placeholder="Enter SQL Server directory path..."
                        />
                    </div>

                    <div>
                        <label class="block text-sm font-medium mb-2">
                            MariaDB Directory (Files to Update)
                        </label>
                        <input 
                            type="text" 
                            @bind="MariaDbPath" 
                            class="w-full p-2 border rounded"
                            placeholder="Enter MariaDB directory path..."
                        />
                    </div>
                </div>

                <!-- Action Buttons -->
                <div class="flex gap-4">
                    <button 
                        class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:opacity-50"
                        @onclick="PreviewChanges"
                        disabled="@(IsProcessing || string.IsNullOrEmpty(SqlServerPath) || string.IsNullOrEmpty(MariaDbPath))">
                        Preview Changes
                    </button>

                    <button 
                        class="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600 disabled:opacity-50"
                        @onclick="ApplyChanges"
                        disabled="@(IsProcessing || string.IsNullOrEmpty(SqlServerPath) || string.IsNullOrEmpty(MariaDbPath))">
                        Apply Changes
                    </button>
                </div>

                <!-- Results Display -->
                @if (IsProcessing)
                {
                    <div class="mt-4">
                        <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
                        <p>Processing...</p>
                    </div>
                }

                @if (Results.Any())
                {
                    <div class="mt-4 p-4 border rounded bg-gray-50">
                        <h2 class="text-xl font-semibold mb-4">Results:</h2>
                        @foreach (var result in Results)
                        {
                            <div class="@(result.StartsWith("Error") ? "text-red-500" : "")">
                                @result
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </ChildContent>
    <ErrorContent>
        <p class="text-red-500">An error occurred while loading the component.</p>
    </ErrorContent>
</ErrorBoundary>

@code {
    private string SqlServerPath { get; set; } = string.Empty;
    private string MariaDbPath { get; set; } = string.Empty;
    private List<string> Results { get; set; } = new();
    private bool IsProcessing { get; set; }

    private async Task PreviewChanges()
    {
        try
        {
            IsProcessing = true;
            Results.Clear();
            Results = await ConverterService.AnalyzeChanges(SqlServerPath, MariaDbPath);
        }
        catch (Exception ex)
        {
            Results.Add($"Error: {ex.Message}");
        }
        finally
        {
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task ApplyChanges()
    {
        try
        {
            IsProcessing = true;
            Results.Clear();
            Results = await ConverterService.ApplyChanges(SqlServerPath, MariaDbPath);
        }
        catch (Exception ex)
        {
            Results.Add($"Error: {ex.Message}");
        }
        finally
        {
            IsProcessing = false;
            StateHasChanged();
        }
    }
}